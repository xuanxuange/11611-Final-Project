#!/usr/bin/env python3

# pip3 install spacy==2.1.0
# python3 -m spacy download en_core_web_lg
# pip3 install neuralcore --no-binary neuralcoref

import re
import sys
import os
import nltk
from nltk.parse import corenlp
import time


DT_LIST = ['the', 'a', 'an', 'this', 'that', 'these', 'those', 'my', 'your', 'his', 'her', 'its', 'our', 'their', 'much', 'many', 'most', 'some', 'any', 'enough', 'all', 'both', 'half', 'either', 'neither', 'each', 'every', 'another', 'such', 'what', 'rather', 'quite']
debug_print = False
final_stats = True


def format_question(question):
    question = question.replace('-LRB- ', '(')
    question = question.replace(' -RRB-', ')')
    for det in DT_LIST:
        question = question.replace('the ' + det + " ", 'the ')
    question = question.replace('the The ', 'The ')
    question = re.sub(r"\s([,;:\.\?!\'])", r"\1", question)
    question = re.sub(r"\.\s*\?", "?", question)
    question = re.sub(r",\s*\?", "?", question)
    question = question.strip()
    question = question[0].upper() + question[1:]
    return question


def blockPrint():
    sys.stdout = open(os.devnull, 'w')
    sys.stderr = open(os.devnull, 'w')


# Restore
def enablePrint():
    sys.stdout = sys.__stdout__
    sys.stderr = sys.__stderr__

common_replacements = {}
common_replacements['c.'] = 'circa'
common_replacements['ca.'] = 'circa'
common_replacements['Dr.'] = 'Doctor'
common_replacements['Esq.'] = 'Esquire'
common_replacements['Dr.'] = 'Doctor'
common_replacements['Esq.'] = 'Esquire'
common_replacements['Hon.'] = 'Honorable'
common_replacements['Jr.'] = 'Junior'
common_replacements['Mr.'] = 'Mister'
common_replacements['Mrs.'] = 'Mistress'
common_replacements['Ms.'] = 'Miss'
common_replacements['Messrs.'] = 'Misters'
common_replacements['Mmes.'] = 'Mistresses'
common_replacements['Msgr.'] = 'Monsignor'
common_replacements['Prof.'] = 'Professor'
common_replacements['Rev.'] = 'Reverend'
common_replacements['Rt. Hon.'] = 'Right Honorable'
common_replacements['Hon.'] = 'Honorable'
common_replacements['Sr.'] = 'Senior'
common_replacements['St.'] = 'Saint'
common_replacements['SS.'] = 'Saints'
common_replacements['Gen.'] = 'General'

# Sometimes, there are periods in weird places. If there's a period in the middle something not
# covered by replacing common replacements, then it's likely that's part of a citation, which can appear in parens
def remove_troublesome_paren(line):
    paren_open = False
    marked_start = []
    marked_end = []
    curr_start = None
    for i in range(len(line)):
        if not paren_open:
            if line[i] == "(":
                paren_open = True
                curr_start = i
        elif line[i] == ".":
            marked_start.append(curr_start)
        elif line[i] == ")":
            paren_open = False
            if len(marked_start) > len(marked_end):
                marked_end.append(i)
    curr_start = 0
    acc_sent = ""
    for i in range(len(marked_end)):
        end = marked_start[i]
        acc_sent += line[curr_start : end]
        curr_start = marked_end[i] + 1
    acc_sent += line[curr_start:]
    return acc_sent


# Replace common periods
def replace_common_periods(text):
    for key,rep in common_replacements.items():
        text = text.replace(key, rep)
    return text

# Remove dashes
def sanitize_line(line):
    pattern0 = re.compile(r'\s+')           # remove unnecessary whitespace
    pattern1 = re.compile(r'([^ ])- ')      # remove trailing -
    pattern2 = re.compile(r' -([^ ])')      # remove trailing -
    pattern3 = re.compile(r'(\s*)\.\.\.')   # remove ellipsis
    line = pattern0.sub(' ', pattern1.sub(r'\1 ', pattern2.sub(r' \1', pattern3.sub('', line))))
    line = replace_common_periods(line)
    return remove_troublesome_paren(line)

if __name__ == "__main__":
    start = time.time()
    article = sys.argv[1]
    nquestions = int(sys.argv[2])
    from src.question_generation.question_gen import *
    from src.question_generation.question_gen_preprocess import preprocess
    from src.question_generation.ranker import Ranker
    end_import = time.time()
    if debug_print:
        print("Import complete: " + str(end_import - start) + " seconds\n")

    parser = corenlp.CoreNLPParser(url='http://localhost:9000', tagtype='pos')

    parsed_list = []
    with open(article) as f:
        line = f.readline()
        while line:
            if len(line.split()) > 0:  # check for empty line

                parsed_iter = parser.parse_text(sanitize_line(line),
                                                timeout=5)  # native output is a listiterator over detected sentences

                while True:
                    try:
                        next_item = next(parsed_iter)
                        parsed_list.append(next_item)
                    except:
                        break
            line = f.readline()
        f.close()
    end_parse = time.time()
    if debug_print:
        print("Initial parse complete: " + str(end_parse - end_import) + " seconds\n")


    preprocessed_list, question_list = preprocess(parsed_list, parser)
    end_preprocess = time.time()
    if debug_print:
        print("Preprocess complete: " + str(end_preprocess - end_parse) + " seconds\n")


    for parse in preprocessed_list:
        # question_list += getWhoWhat(parse) + getWhoWhatNP(parse) + getBinarySimple(parse) + getBinaryAuxiliary(parse)
        question_list += generate_questions(parse)
        pass

    end_generation = time.time()
    if debug_print:
        print("Generation complete: " + str(end_generation - end_preprocess) + " seconds\n")

    i = 0
    # enablePrint()
    # while i < len(question_list) and i < nquestions:
    qranker = Ranker(parser, type_weights={"SR": 20, "BA":15, "BS":15, "WW":12, "AP":12, "NP":5, "PP":4})
    question_list = qranker.top_n_qstr([q[4:] for q in question_list], n=nquestions, typelist=[q[:2] for q in question_list])
    question_list = [b for a,b in question_list]
    while i < len(question_list) and (debug_print or i < nquestions):
        # print("Original: " + question_list[i])
        print(format_question(question_list[i]))
        i += 1

    if debug_print or final_stats:
        print(len(question_list))
        print("Total time: " + str(end_generation - start) + " seconds\n")
